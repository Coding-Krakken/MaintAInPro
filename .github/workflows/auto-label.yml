name: 🏷️ Auto-Label Issues & PRs

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  auto-label:
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Label issues based on content
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = issue.body ? issue.body.toLowerCase() : '';
            const labels = [];

            // Priority labels
            if (title.includes('urgent') || title.includes('critical') || body.includes('urgent') || body.includes('critical')) {
              labels.push('🔥 critical');
            } else if (title.includes('important') || body.includes('important')) {
              labels.push('⚡ high-priority');
            }

            // Type labels
            if (title.includes('bug') || title.includes('error') || title.includes('issue') || body.includes('error')) {
              labels.push('🐛 bug');
            }
            if (title.includes('feature') || title.includes('enhancement') || body.includes('feature request')) {
              labels.push('✨ enhancement');
            }
            if (title.includes('documentation') || title.includes('docs') || body.includes('documentation')) {
              labels.push('📚 documentation');
            }
            if (title.includes('test') || body.includes('test')) {
              labels.push('🧪 testing');
            }
            if (title.includes('ci') || title.includes('deployment') || body.includes('ci/cd')) {
              labels.push('🚀 ci/cd');
            }
            if (title.includes('security') || body.includes('security') || body.includes('vulnerability')) {
              labels.push('🔒 security');
            }
            if (title.includes('performance') || body.includes('performance') || body.includes('slow')) {
              labels.push('⚡ performance');
            }

            // Component labels
            if (body.includes('frontend') || body.includes('client') || body.includes('ui')) {
              labels.push('🎨 frontend');
            }
            if (body.includes('backend') || body.includes('server') || body.includes('api')) {
              labels.push('⚙️ backend');
            }
            if (body.includes('database') || body.includes('sql') || body.includes('postgres')) {
              labels.push('🗄️ database');
            }

            // Auto-generated issues
            if (issue.user.login.includes('bot') || body.includes('auto-generated')) {
              labels.push('🤖 automated');
            }

            // Agent-ready issues (from planner)
            if (body.includes('auto-generated from Blueprint') || title.includes('Task:')) {
              labels.push('agent-ok');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
              
              console.log(`Added labels: ${labels.join(', ')}`);
            }

      - name: 🔍 Label PRs based on files changed
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title.toLowerCase();
            const labels = [];

            // Get list of files changed
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const changedFiles = files.data.map(file => file.filename);
            console.log('Changed files:', changedFiles);

            // Analyze file patterns
            const hasClientChanges = changedFiles.some(file => file.startsWith('client/'));
            const hasServerChanges = changedFiles.some(file => file.startsWith('server/'));
            const hasTestChanges = changedFiles.some(file => file.includes('test') || file.includes('spec'));
            const hasDocsChanges = changedFiles.some(file => file.includes('docs') || file.includes('README') || file.includes('.md'));
            const hasCIChanges = changedFiles.some(file => file.includes('.github/') || file.includes('ci'));
            const hasConfigChanges = changedFiles.some(file => file.includes('config') || file.includes('.json') || file.includes('.yml'));
            const hasSchemaChanges = changedFiles.some(file => file.includes('schema') || file.includes('migration'));

            // Add component labels
            if (hasClientChanges) labels.push('🎨 frontend');
            if (hasServerChanges) labels.push('⚙️ backend');
            if (hasSchemaChanges) labels.push('🗄️ database');
            if (hasTestChanges) labels.push('🧪 testing');
            if (hasDocsChanges) labels.push('📚 documentation');
            if (hasCIChanges) labels.push('🚀 ci/cd');
            if (hasConfigChanges) labels.push('⚙️ configuration');

            // Type labels based on title
            if (title.includes('fix') || title.includes('bug')) {
              labels.push('🐛 bug');
            } else if (title.includes('feat') || title.includes('feature')) {
              labels.push('✨ enhancement');
            } else if (title.includes('docs')) {
              labels.push('📚 documentation');
            } else if (title.includes('test')) {
              labels.push('🧪 testing');
            } else if (title.includes('ci') || title.includes('deps')) {
              labels.push('🚀 ci/cd');
            } else if (title.includes('refactor')) {
              labels.push('♻️ refactoring');
            } else if (title.includes('perf')) {
              labels.push('⚡ performance');
            }

            // Size labels based on changes
            const totalChanges = pr.additions + pr.deletions;
            if (totalChanges < 10) {
              labels.push('🐁 tiny');
            } else if (totalChanges < 100) {
              labels.push('🐛 small');
            } else if (totalChanges < 500) {
              labels.push('🐕 medium');
            } else if (totalChanges < 1000) {
              labels.push('🐘 large');
            } else {
              labels.push('🦣 huge');
            }

            // Dependabot PRs
            if (pr.user.login === 'dependabot[bot]') {
              labels.push('🤖 dependabot');
              labels.push('dependencies');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: labels
              });
              
              console.log(`Added labels: ${labels.join(', ')}`);
            }
