name: PR Quality Gate

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [main, Replit]

permissions:
  contents: read
  pull-requests: write
  security-events: write
  checks: write

env:
  NODE_VERSION: '18'

jobs:
  # Skip draft PRs unless explicitly requested
  check-ready:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.result }}
    steps:
      - name: Check if PR is ready
        id: check
        run: |
          if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            echo "result=false" >> $GITHUB_OUTPUT
            echo "Skipping draft PR"
          else
            echo "result=true" >> $GITHUB_OUTPUT
            echo "PR is ready for checks"
          fi

  build-and-test:
    needs: check-ready
    if: needs.check-ready.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run type-check
      
      - name: Lint check
        run: npm run lint:check
      
      - name: Format check
        run: npm run format:check
      
      - name: Build project
        run: npm run build
      
      - name: Run unit tests
        run: npm run test:unit
        env:
          CI: true
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
      
      - name: Generate test coverage
        run: npm run test:coverage
        env:
          CI: true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
      
      - name: Check bundle size
        run: |
          # Create bundle size report
          if [ -f "dist/public/assets/index.*.js" ]; then
            BUNDLE_SIZE=$(stat -c%s dist/public/assets/index.*.js | awk '{sum+=$1} END {print sum}')
            BUNDLE_SIZE_KB=$((BUNDLE_SIZE / 1024))
            echo "Bundle size: ${BUNDLE_SIZE_KB}KB"
            
            # Warn if bundle is too large (>1MB)
            if [ $BUNDLE_SIZE_KB -gt 1024 ]; then
              echo "⚠️ Warning: Bundle size is large (${BUNDLE_SIZE_KB}KB)" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  security-scan:
    needs: check-ready
    if: needs.check-ready.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for analysis
        run: npm run build
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || echo "⚠️ Security vulnerabilities found"
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  docs-check:
    needs: check-ready
    if: needs.check-ready.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for documentation updates
        id: docs-check
        run: |
          # Get changed files
          git diff --name-only origin/${{ github.event.repository.default_branch }}...HEAD > changed_files.txt
          
          # Check if API files changed
          API_CHANGED=$(grep -E "(server/routes|shared/schema\.ts|server/index\.ts)" changed_files.txt || true)
          
          # Check if features changed
          FEATURE_CHANGED=$(grep -E "(client/src/components|client/src/pages)" changed_files.txt || true)
          
          # Check if docs were updated
          DOCS_UPDATED=$(grep -E "(Documentation/|README\.md|CHANGELOG\.md)" changed_files.txt || true)
          
          if [[ -n "$API_CHANGED" || -n "$FEATURE_CHANGED" ]]; then
            if [[ -z "$DOCS_UPDATED" ]]; then
              echo "⚠️ **Documentation Check**: API or feature files changed but no documentation updates found." >> $GITHUB_STEP_SUMMARY
              echo "Consider updating:" >> $GITHUB_STEP_SUMMARY
              echo "- README.md for user-facing changes" >> $GITHUB_STEP_SUMMARY
              echo "- Documentation/API/ for API changes" >> $GITHUB_STEP_SUMMARY
              echo "- CHANGELOG.md for release notes" >> $GITHUB_STEP_SUMMARY
              echo "- Documentation/Blueprint/ for architectural changes" >> $GITHUB_STEP_SUMMARY
              echo "docs_needed=true" >> $GITHUB_OUTPUT
            else
              echo "✅ Documentation updates found" >> $GITHUB_STEP_SUMMARY
              echo "docs_needed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "docs_needed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate markdown files
        run: |
          # Check for broken internal links in markdown files
          find Documentation/ -name "*.md" -exec grep -l "\[\[.*\]\]" {} \; || true
          
          # Check for TODO/FIXME comments in new code
          git diff origin/${{ github.event.repository.default_branch }}...HEAD | grep -E "TODO|FIXME|XXX" || true

  performance-check:
    needs: check-ready
    if: needs.check-ready.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Analyze bundle
        run: |
          # Basic bundle analysis
          if [ -d "dist/public" ]; then
            echo "## 📦 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
            echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|" >> $GITHUB_STEP_SUMMARY
            
            find dist/public -name "*.js" -o -name "*.css" | while read file; do
              size=$(stat -c%s "$file" | numfmt --to=iec)
              echo "| \`$(basename "$file")\` | $size |" >> $GITHUB_STEP_SUMMARY
            done
          fi

  auto-merge:
    needs: [build-and-test, security-scan, docs-check, performance-check]
    if: always() && needs.build-and-test.result == 'success' && needs.security-scan.result == 'success' && contains(github.event.pull_request.labels.*.name, 'automerge')
    runs-on: ubuntu-latest
    
    steps:
      - name: Enable auto-merge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash
      
      - name: Auto-merge notification
        run: |
          echo "🤖 Auto-merge enabled for this PR" >> $GITHUB_STEP_SUMMARY
          echo "The PR will be automatically merged when all required checks pass" >> $GITHUB_STEP_SUMMARY

  # Quality gate summary
  quality-summary:
    needs: [build-and-test, security-scan, docs-check, performance-check]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Quality Gate Summary
        run: |
          echo "## 🎯 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Tests | ${{ needs.build-and-test.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.docs-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          
          AUTO_MERGE_ELIGIBLE=${{ contains(github.event.pull_request.labels.*.name, 'automerge') }}
          ALL_PASSED=${{ needs.build-and-test.result == 'success' && needs.security-scan.result == 'success' && needs.docs-check.result == 'success' && needs.performance-check.result == 'success' }}
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "$AUTO_MERGE_ELIGIBLE" == "true" && "$ALL_PASSED" == "true" ]]; then
            echo "🚀 **Auto-merge**: Enabled and ready" >> $GITHUB_STEP_SUMMARY
          elif [[ "$AUTO_MERGE_ELIGIBLE" == "true" ]]; then
            echo "⏳ **Auto-merge**: Waiting for checks to pass" >> $GITHUB_STEP_SUMMARY
          else
            echo "👥 **Manual review**: Required (no automerge label)" >> $GITHUB_STEP_SUMMARY
          fi
