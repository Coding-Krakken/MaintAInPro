# MaintAInPro CI/CD Pipeline - Optimized
# Purpose: Full build, test, security, and deployment pipeline for PRs and pushes to main/stable branches.
# Triggers: Only runs for code changes, not docs-only edits.
name: ⚡ CI/CD Pipeline - Optimized
on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [main, Replit]
    paths:
      - '**/*.ts'
      - '**/*.js'
      - 'client/**'
      - 'server/**'
      - 'shared/**'
      - 'api/**'
  push:
    branches: [main, Replit, stable]
    paths:
      - '**/*.ts'
      - '**/*.js'
      - 'client/**'
      - 'server/**'
      - 'shared/**'
      - 'api/**'

permissions:
  contents: read
  pull-requests: write
  security-events: write
  checks: write
  deployments: write
  issues: write

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Meta job to control workflow execution
  workflow-control:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.control.outputs.should-run }}
      is-pr: ${{ steps.control.outputs.is-pr }}
      is-push: ${{ steps.control.outputs.is-push }}
      branch: ${{ steps.control.outputs.branch }}
    steps:
      - name: Workflow Control Logic
        id: control
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Draft: ${{ github.event.pull_request.draft }}"
          echo "Branch: ${{ github.ref_name }}"

          # Skip draft PRs unless explicitly requested
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.draft }}" == "true" ]]; then
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "🔄 Skipping draft PR - add 'ready for review' to run pipeline"
            exit 0
          fi

          echo "should-run=true" >> $GITHUB_OUTPUT
          echo "is-pr=${{ github.event_name == 'pull_request' }}" >> $GITHUB_OUTPUT
          echo "is-push=${{ github.event_name == 'push' }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "✅ Pipeline execution approved"

  # Optimized build and quality checks job
  build-and-quality:
    needs: workflow-control
    if: needs.workflow-control.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      cache-key: ${{ steps.cache-deps.outputs.cache-primary-key }}
      build-success: ${{ steps.build.outcome == 'success' }}
      test-results: ${{ steps.tests.outputs.results }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js with Caching
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Type check
        run: |
          echo "Running TypeScript type checking..."
          npm run type-check
          echo "✅ Type check passed"

      - name: 🧹 Lint check
        run: |
          echo "Running ESLint checks..."
          npm run lint:check 2>&1 | tee lint-results.txt || {
            echo "❌ Linting failed. See details above."
            # Show just the summary for large outputs
            tail -50 lint-results.txt
            exit 1
          }
          echo "✅ Lint check passed"

      - name: 🎨 Format check
        run: |
          echo "Checking code formatting..."
          npm run format:check
          echo "✅ Format check passed"

      - name: 🔨 Build project
        id: build
        run: |
          echo "Building project..."
          npm run build
          echo "✅ Build completed successfully"

          # Analyze bundle size
          if [ -f "dist/public/assets/index.*.js" ]; then
            BUNDLE_SIZE=$(find dist/public/assets -name "index.*.js" -exec stat -c%s {} \; | awk '{sum+=$1} END {print sum}')
            BUNDLE_SIZE_KB=$((BUNDLE_SIZE / 1024))
            echo "bundle-size-kb=$BUNDLE_SIZE_KB" >> $GITHUB_OUTPUT
            echo "📦 Bundle size: ${BUNDLE_SIZE_KB}KB"
            
            if [ $BUNDLE_SIZE_KB -gt 1024 ]; then
              echo "⚠️ Bundle size is large (${BUNDLE_SIZE_KB}KB)" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: 🧪 Run tests
        id: tests
        run: |
          echo "Running test suites..."

          # Unit tests
          echo "🔸 Running unit tests..."
          npm run test:unit 2>&1 | tee test-unit-results.txt

          # Integration tests
          echo "🔸 Running integration tests..."
          npm run test:integration 2>&1 | tee test-integration-results.txt || {
            echo "⚠️ Some integration tests failed, but continuing..."
          }

          # Generate coverage
          echo "🔸 Generating test coverage..."
          npm run test:coverage 2>&1 | tee test-coverage-results.txt || echo "Coverage generation failed"

          echo "✅ Test suite completed"
          echo "results=completed" >> $GITHUB_OUTPUT

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true

      - name: 📈 Bundle Analysis
        if: steps.build.outcome == 'success'
        run: |
          echo "## 📦 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY

          if [ -d "dist/public" ]; then
            find dist/public -name "*.js" -o -name "*.css" | while read file; do
              size=$(stat -c%s "$file" | numfmt --to=iec)
              echo "| \`$(basename "$file")\` | $size |" >> $GITHUB_STEP_SUMMARY
            done
          fi

  # Security and compliance checks
  security-scan:
    needs: workflow-control
    if: needs.workflow-control.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔒 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build for analysis
        run: npm run build

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'

      - name: 🛡️ Security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level=moderate 2>&1 | tee audit-results.txt || {
            echo "⚠️ Security vulnerabilities found - check audit-results.txt"
            # Don't fail on audit issues for now, just warn
          }

      - name: 🔐 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Deployment jobs (conditional)
  deploy-preview:
    needs: [workflow-control, build-and-quality]
    if: needs.workflow-control.outputs.is-pr == 'true' && needs.build-and-quality.outputs.build-success == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Vercel CLI
        run: npm install -g vercel@latest

      - name: ⚙️ Pull Vercel Environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🔨 Build Project
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🚀 Preview deployed to: $DEPLOYMENT_URL"

      - name: 🏥 Health Check
        run: |
          URL="${{ steps.deploy.outputs.preview-url }}"
          echo "🔍 Testing deployment health at: $URL"

          for i in {1..3}; do
            echo "Attempt $i/3..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL/" || echo "000")
            echo "HTTP Response: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "401" ]; then
              echo "✅ Preview deployment is healthy"
              break
            fi
            
            if [ $i -eq 3 ]; then
              echo "⚠️ Health check inconclusive, but deployment may still be working"
            fi
            sleep 10
          done

      - name: 💬 Comment PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.preview-url }}';
            const commitSha = context.sha.substring(0, 7);

            const comment = `## 🚀 Preview Deployment Ready

            | 🔗 **Preview URL** | ${deploymentUrl} |
            |:---|:---|
            | 📝 **Commit** | ${commitSha} |
            | 🔄 **Status** | ✅ Ready for testing |

            > Click the preview URL above to test your changes!`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  deploy-production:
    needs: [workflow-control, build-and-quality, security-scan]
    if: needs.workflow-control.outputs.is-push == 'true' && contains(fromJson('["main", "stable"]'), needs.workflow-control.outputs.branch)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js with Caching
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Vercel CLI
        run: npm install -g vercel@latest

      - name: ⚙️ Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🔨 Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Production
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🚀 Production deployed to: $DEPLOYMENT_URL"

      - name: 🏥 Production Health Check
        id: health-check
        run: |
          URL="${{ steps.deploy.outputs.production-url }}"
          echo "🔍 Testing production deployment at: $URL"

          for i in {1..5}; do
            echo "Attempt $i/5..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL/" || echo "000")
            echo "HTTP Response: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "401" ]; then
              echo "✅ Production deployment is healthy"
              exit 0
            fi
            
            echo "⏳ Waiting 15s before retry..."
            sleep 15
          done

          echo "❌ Production health check failed after 5 attempts"
          exit 1

      - name: 🌐 Update Domain Aliases
        if: success()
        run: |
          echo "🔄 Updating domain aliases for ${{ needs.workflow-control.outputs.branch }}..."
          DEPLOYMENT_URL="${{ steps.deploy.outputs.production-url }}"
          DEPLOYMENT_ID=$(echo "$DEPLOYMENT_URL" | grep -o '[^/]*\.vercel\.app' | head -1)

          if [ "${{ needs.workflow-control.outputs.branch }}" = "main" ]; then
            echo "Updating main branch domains..."
            vercel alias set "$DEPLOYMENT_ID" unitedautosupply.org --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }} || echo "Failed to update unitedautosupply.org"
            vercel alias set "$DEPLOYMENT_ID" www.unitedautosupply.org --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }} || echo "Failed to update www.unitedautosupply.org"
          elif [ "${{ needs.workflow-control.outputs.branch }}" = "stable" ]; then
            echo "Updating stable branch domains..."
            vercel alias set "$DEPLOYMENT_ID" uasmaintenance.com --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }} || echo "Failed to update uasmaintenance.com"
            vercel alias set "$DEPLOYMENT_ID" www.uasmaintenance.com --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }} || echo "Failed to update www.uasmaintenance.com"
          fi

          echo "✅ Domain aliases updated successfully"

      - name: 🚨 Create issue on deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Production Deployment Failed - ${context.sha.substring(0, 7)}`;
            const body = `## Deployment Failure Report

            **Branch:** \`${{ needs.workflow-control.outputs.branch }}\`  
            **Commit:** \`${context.sha}\`  
            **Actor:** @${context.actor}  
            **Workflow:** [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})

            **Failed Components:**
            - Deployment URL: ${{ steps.deploy.outputs.production-url || 'N/A' }}
            - Health Check: ${{ steps.health-check.outcome || 'N/A' }}

            **Next Steps:**
            1. 🔍 [Check workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
            2. 🔧 Verify Vercel deployment status  
            3. 🩺 Check application health endpoints
            4. 📝 Review changes in commit ${context.sha.substring(0, 7)}
            5. 🔄 Consider rollback if critical

            **Auto-created by CI/CD pipeline** 🤖`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['🚨 blocked', '🤖 needs-human', '🚀 deployment-failure', '🔥 critical']
            });

  # Quality gate and final status
  quality-gate:
    needs: [workflow-control, build-and-quality, security-scan]
    if: always() && needs.workflow-control.outputs.should-run == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: 📊 Quality Gate Summary
        run: |
          echo "## 🎯 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          # Build and Quality
          BUILD_STATUS="${{ needs.build-and-quality.result }}"
          if [ "$BUILD_STATUS" = "success" ]; then
            echo "| 🔨 Build & Tests | ✅ Pass | All quality checks passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔨 Build & Tests | ❌ Fail | Check logs for details |" >> $GITHUB_STEP_SUMMARY
          fi

          # Security
          SECURITY_STATUS="${{ needs.security-scan.result }}"
          if [ "$SECURITY_STATUS" = "success" ]; then
            echo "| 🔒 Security Scan | ✅ Pass | No critical issues found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔒 Security Scan | ❌ Fail | Security issues detected |" >> $GITHUB_STEP_SUMMARY
          fi

          # Auto-merge eligibility
          AUTO_MERGE_ELIGIBLE="${{ contains(github.event.pull_request.labels.*.name, 'automerge') }}"
          ALL_PASSED=$([ "$BUILD_STATUS" = "success" ] && [ "$SECURITY_STATUS" = "success" ] && echo "true" || echo "false")

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.workflow-control.outputs.is-pr }}" = "true" ]; then
            if [ "$AUTO_MERGE_ELIGIBLE" = "true" ] && [ "$ALL_PASSED" = "true" ]; then
              echo "🤖 **Auto-merge**: Ready to merge automatically" >> $GITHUB_STEP_SUMMARY
            elif [ "$AUTO_MERGE_ELIGIBLE" = "true" ]; then
              echo "⏳ **Auto-merge**: Waiting for all checks to pass" >> $GITHUB_STEP_SUMMARY  
            else
              echo "👥 **Manual review**: Required (add \`automerge\` label for auto-merge)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "🚀 **Production**: Deployment initiated for \`${{ needs.workflow-control.outputs.branch }}\` branch" >> $GITHUB_STEP_SUMMARY
          fi

          # Overall status
          if [ "$ALL_PASSED" = "true" ]; then
            echo "🎉 **Overall Status**: All quality gates passed!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "💥 **Overall Status**: Quality gates failed - see details above" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Auto-merge for approved PRs
  auto-merge:
    needs: [build-and-quality, security-scan, quality-gate]
    if: |
      always() && 
      github.event_name == 'pull_request' &&
      needs.build-and-quality.result == 'success' && 
      needs.security-scan.result == 'success' && 
      contains(github.event.pull_request.labels.*.name, 'automerge')
    runs-on: ubuntu-latest
    steps:
      - name: 🤖 Enable auto-merge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash

      - name: 📝 Auto-merge notification
        run: |
          echo "🤖 Auto-merge enabled for PR #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "The PR will be automatically merged when all required checks pass" >> $GITHUB_STEP_SUMMARY
