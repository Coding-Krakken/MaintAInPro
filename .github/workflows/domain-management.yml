name: Automatic Domain Management

on:
  push:
    branches:
      - main # Production deployment for unitedautosupply.org
      - stable # Stable deployment for uasmaintenance.com
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all domain aliases'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  deployments: read

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  update-domain-aliases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Get Latest Deployment URL
        id: get-deployment
        run: |
          # Get the latest deployment for the current branch
          LATEST_DEPLOYMENT=$(vercel ls --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }} | grep "● Ready" | grep "Production" | head -1 | awk '{print $2}' | sed 's/https:\/\///')

          if [ -z "$LATEST_DEPLOYMENT" ]; then
            echo "❌ No production deployment found"
            echo "DEPLOYMENT_FOUND=false" >> $GITHUB_ENV
            exit 1
          fi

          echo "Latest deployment: $LATEST_DEPLOYMENT"
          echo "deployment-url=$LATEST_DEPLOYMENT" >> $GITHUB_OUTPUT
          # Get deployments for the current branch
          echo "Listing all deployments for debugging:"
          vercel ls --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }}

          # Get the current branch name
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          echo "Current branch: $BRANCH_NAME"

          # Filter deployments by branch and status
          LATEST_DEPLOYMENT=$(vercel ls --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }} | grep "● Ready" | grep "Production" | grep "$BRANCH_NAME" | head -1 | awk '{print $2}' | sed 's/https:\/\///')

          if [ -z "$LATEST_DEPLOYMENT" ]; then
            echo "❌ No production deployment found for branch $BRANCH_NAME."
            echo "deployment-url=" >> $GITHUB_OUTPUT
            echo "DEPLOYMENT_FOUND=false" >> $GITHUB_ENV
            exit 1
          fi

          echo "Latest deployment for branch $BRANCH_NAME: $LATEST_DEPLOYMENT"
          echo "deployment-url=$LATEST_DEPLOYMENT" >> $GITHUB_OUTPUT
          echo "DEPLOYMENT_FOUND=true" >> $GITHUB_ENV

      - name: Update Domain Aliases for Main Branch
        if: github.ref == 'refs/heads/main' && env.DEPLOYMENT_FOUND == 'true'
        run: |
          echo "🔄 Updating domain aliases for main branch..."
          DEPLOYMENT_URL="${{ steps.get-deployment.outputs.deployment-url }}"

          # Update unitedautosupply.org (main production domain)
          echo "Updating unitedautosupply.org..."
          vercel alias set "$DEPLOYMENT_URL" unitedautosupply.org --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }}

          # Update www.unitedautosupply.org
          echo "Updating www.unitedautosupply.org..."
          vercel alias set "$DEPLOYMENT_URL" www.unitedautosupply.org --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }}

          echo "✅ Main branch domains updated successfully"

      - name: Update Domain Aliases for Stable Branch
        if: github.ref == 'refs/heads/stable' && env.DEPLOYMENT_FOUND == 'true'
        run: |
          echo "🔄 Updating domain aliases for stable branch..."
          DEPLOYMENT_URL="${{ steps.get-deployment.outputs.deployment-url }}"

          # Update uasmaintenance.com (stable branch domain)
          echo "Updating uasmaintenance.com..."
          vercel alias set "$DEPLOYMENT_URL" uasmaintenance.com --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }}

          # Update www.uasmaintenance.com
          echo "Updating www.uasmaintenance.com..."
          vercel alias set "$DEPLOYMENT_URL" www.uasmaintenance.com --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }}

          echo "✅ Stable branch domains updated successfully"

      - name: Force Update All Domains (Manual Trigger)
        if: github.event.inputs.force_update == 'true' && env.DEPLOYMENT_FOUND == 'true'
        run: |
          echo "🔄 Force updating all domain aliases..."
          DEPLOYMENT_URL="${{ steps.get-deployment.outputs.deployment-url }}"

          # Update all domains to point to current deployment
          echo "Force updating all domains..."
          vercel alias set "$DEPLOYMENT_URL" unitedautosupply.org --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }}
          vercel alias set "$DEPLOYMENT_URL" www.unitedautosupply.org --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }}
          vercel alias set "$DEPLOYMENT_URL" uasmaintenance.com --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }}
          vercel alias set "$DEPLOYMENT_URL" www.uasmaintenance.com --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }}

          echo "✅ All domains force updated successfully"

      - name: Verify Domain Assignments
        run: |
          echo "🔍 Verifying domain assignments..."
          echo "Current aliases:"
          vercel alias ls --scope coding-krakken-projects --token=${{ secrets.VERCEL_TOKEN }} | grep -E "(unitedautosupply|uasmaintenance)"

          echo "✅ Domain verification complete"

      - name: Create Domain Update Summary
        run: |
          cat > domain-update-summary.json << EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "branch": "${{ github.ref_name }}",
            "sha": "${{ github.sha }}",
            "deploymentUrl": "${{ steps.get-deployment.outputs.deployment-url }}",
            "deploymentFound": "${{ env.DEPLOYMENT_FOUND }}",
            "updatedDomains": {
              "main": $(if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ env.DEPLOYMENT_FOUND }}" = "true" ]; then echo '["unitedautosupply.org", "www.unitedautosupply.org"]'; else echo '[]'; fi),
              "stable": $(if [ "${{ github.ref }}" = "refs/heads/stable" ] && [ "${{ env.DEPLOYMENT_FOUND }}" = "true" ]; then echo '["uasmaintenance.com", "www.uasmaintenance.com"]'; else echo '[]'; fi),
              "force": $(if [ "${{ github.event.inputs.force_update }}" = "true" ] && [ "${{ env.DEPLOYMENT_FOUND }}" = "true" ]; then echo '["unitedautosupply.org", "www.unitedautosupply.org", "uasmaintenance.com", "www.uasmaintenance.com"]'; else echo '[]'; fi)
            },
            "actor": "${{ github.actor }}",
            "workflowRun": "${{ github.run_id }}"
          }
          EOF

          echo "Domain update summary:"
          cat domain-update-summary.json

      - name: Upload Domain Update Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: domain-update-summary-${{ github.ref_name }}-${{ github.run_number }}
          path: domain-update-summary.json
          retention-days: 30
