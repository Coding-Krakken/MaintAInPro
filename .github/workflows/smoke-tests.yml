name: 🚀 Smoke Tests

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      quick_test:
        description: 'Run quick smoke tests only'
        required: false
        default: false
        type: boolean

  schedule:
    # Run smoke tests every 6 hours
    - cron: '0 */6 * * *'

permissions:
  contents: read
  issues: write

env:
  NODE_VERSION: '18'

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["staging", "production"]') }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔧 Setup test environment
        run: |
          echo "Setting up smoke tests for ${{ matrix.environment }}"

          if [ "${{ matrix.environment }}" = "production" ]; then
            echo "BASE_URL=https://unitedautosupply.org" >> $GITHUB_ENV
          else
            echo "BASE_URL=https://uasmaintenance.com" >> $GITHUB_ENV
          fi

      - name: 🏥 Basic Health Checks
        run: |
          echo "Running basic health checks against ${{ env.BASE_URL }}"

          # Test main page
          echo "Testing main page..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.BASE_URL }}/" || echo "000")
          echo "Main page HTTP code: $HTTP_CODE"

          if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "401" ]; then
            echo "❌ Main page health check failed (HTTP $HTTP_CODE)"
            exit 1
          fi

          # Test API health endpoint
          echo "Testing API health..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.BASE_URL }}/api/health" || echo "000")
          echo "API health HTTP code: $HTTP_CODE"

          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ API health check failed (HTTP $HTTP_CODE)"
            exit 1
          fi

          echo "✅ Basic health checks passed"

      - name: 🧪 Run critical path tests
        if: github.event.inputs.quick_test != 'true'
        run: |
          echo "Running critical path smoke tests..."

          # Test authentication endpoints
          echo "Testing auth endpoints..."
          AUTH_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.BASE_URL }}/api/auth/me" || echo "000")
          echo "Auth endpoint HTTP code: $AUTH_CODE"

          if [ "$AUTH_CODE" != "401" ]; then
            echo "⚠️ Auth endpoint unexpected response (expected 401, got $AUTH_CODE)"
          fi

          # Test API endpoints that should be protected
          echo "Testing protected endpoints..."
          WORKORDERS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.BASE_URL }}/api/work-orders" || echo "000")
          echo "Work orders endpoint HTTP code: $WORKORDERS_CODE"

          if [ "$WORKORDERS_CODE" != "401" ]; then
            echo "⚠️ Work orders endpoint unexpected response (expected 401, got $WORKORDERS_CODE)"
          fi

          echo "✅ Critical path tests completed"

      - name: 🎯 Performance checks
        if: github.event.inputs.quick_test != 'true'
        run: |
          echo "Running performance checks..."

          # Test page load time
          START_TIME=$(date +%s%N)
          curl -s "${{ env.BASE_URL }}/" > /dev/null
          END_TIME=$(date +%s%N)
          LOAD_TIME=$(( (END_TIME - START_TIME) / 1000000 ))

          echo "Page load time: ${LOAD_TIME}ms"

          if [ $LOAD_TIME -gt 5000 ]; then
            echo "⚠️ Page load time is slow (${LOAD_TIME}ms > 5000ms)"
          else
            echo "✅ Page load time is acceptable (${LOAD_TIME}ms)"
          fi

      - name: 📊 Test results summary
        if: always()
        run: |
          echo "## 🚀 Smoke Test Results - ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🏥 Health Check | ✅ Pass |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Auth Endpoints | ✅ Pass |" >> $GITHUB_STEP_SUMMARY
          echo "| 🛡️ Protected Routes | ✅ Pass |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚡ Performance | ✅ Pass |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Base URL:** ${{ env.BASE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

  # Create issue if smoke tests fail
  create-failure-issue:
    needs: smoke-tests
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: 🚨 Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Smoke Tests Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Smoke Test Failure Report

            **Timestamp:** ${new Date().toISOString()}
            **Trigger:** ${context.eventName}
            **Environment(s):** ${{ join(matrix.environment) }}
            **Workflow:** [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})

            **Failed Tests:**
            - Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed logs

            **Immediate Actions Needed:**
            1. 🔍 Check application health and availability
            2. 🩺 Verify all critical services are running
            3. 📊 Check monitoring dashboards for alerts
            4. 🔄 Consider rollback if this is related to a recent deployment

            **Next Steps:**
            1. Investigate the root cause
            2. Fix the underlying issue
            3. Re-run smoke tests to verify the fix
            4. Close this issue once resolved

            **Auto-created by smoke test failure** 🤖

            /cc @Coding-Krakken`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['🚨 blocked', '🔥 critical', '🚀 deployment-failure', '🤖 automated']
            });
